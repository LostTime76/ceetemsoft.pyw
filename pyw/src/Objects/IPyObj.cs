namespace CeetemSoft.Pyw;

/// <summary>
///     All custom python object wrappers need to implement this interface. The debugger uses the interface
///     to properly implement debug views for objects
/// </summary>
public interface IPyObj
{
    /// <summary>
    ///     Returns the python object handle
    /// </summary>
    public nint GetHandle();

    /// <summary>
    ///     Returns the type name of the type wrapped by the wrapper.
    /// </summary>
    /// <remarks>
    ///     The returned string needs to match the string generated by the python type name. For example,
    ///     bool.__name__ yields the python string: 'bool'. The NET string returned would then be "bool"
    /// </remarks>
    public string GetTypename();

    /// <summary>
    ///     Returns the user presentable object value for the python object.
    /// </summary>
    /// <remarks>
    ///     The value is used in the debug view to display the value of a variable for generic python object
    ///     variables (PyObj)
    /// </remarks>
    /// <returns>
    ///     The value will be boxed if it is a basic type. If no value is to be displayed, null can be returned
    /// </returns>
    public object GetValue();


    /// <summary>
    ///     Used to create a new wrapper instance with the given handle value
    /// </summary>
    /// <remarks>
    ///     The debug view needs to create new object instances for collection type objects
    /// <returns>
    ///     The wrapper should return a new instance of itself with the given handle value.
    /// </returns>
    public IPyObj NewInst(nint hObj);
}